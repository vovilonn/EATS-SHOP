import { useEffect, useState } from 'react';
import { useDispatch } from 'react-redux';
import { useTypedSelector } from '@/shared/hooks/use-typed-selector';
import { TypeDispatch } from '@/shared/store';

import {
  createNewLevel,
  deleteLevel,
  editLevel,
  getLevelOptions,
} from '@/shared/store/admin/requests';

import { Button, Form, Input, message, Modal } from 'antd';

import styles from './index.module.scss';
import ILevelOption from '@/shared/interfaces/level-option.interface';

const CashbackPageContent: React.FC = () => {
  const dispatch = useDispatch<TypeDispatch>();
  const { levelOptions } = useTypedSelector((state) => state.adminPanel);

  const [form] = Form.useForm();

  const [isModalOpen, setIsModalOpen] = useState(false);
  const [editedLevel, setEditedLevel] = useState<ILevelOption | null>(null);

  useEffect(() => {
    dispatch(getLevelOptions());
  }, []);

  const showModal = () => {
    setIsModalOpen(true);
  };

  const handleCancel = () => {
    setIsModalOpen(false);
    form.resetFields();
  };

  const handleSubmit = async (values: any) => {
    const newLevel = {
      name: values.name,
      min_amount: values.min_amount,
      max_amount: values.max_amount,
      percentage_cashback: values.percentage_cashback,
    };

    try {
      if (!editedLevel) {
        await dispatch(createNewLevel(newLevel));
        message.success('–£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!');
      } else {
        await dispatch(editLevel({ ...newLevel, id: editedLevel.id }));
        message.success('–£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!');
      }

      setIsModalOpen(false);
      form.resetFields();

      await dispatch(getLevelOptions());
    } catch (error) {
      message.error('–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!');
      console.log(error);
    }
  };

  const onDelete = async (id: number) => {
    Modal.confirm({
      title: '–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏?',
      okText: '–¢–∞–∫',
      okType: 'danger',
      cancelText: '–ù—ñ',
      onOk: async () => {
        try {
          await dispatch(deleteLevel(id)).unwrap();
          await dispatch(getLevelOptions());
          message.success('–£—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ');
        } catch (error) {
          message.error('–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏!');
        }
      },
    });
  };

  const onEdit = async (level: ILevelOption) => {
    setEditedLevel(level);
    setIsModalOpen(true);
    form.setFieldsValue({
      name: level.name,
      min_amount: level.min_amount,
      max_amount: level.max_amount,
      percentage_cashback: level.percentage_cashback,
    });
  };

  return (
    <div className={styles.container}>
      <h2 className={styles.title}>–ö—ç—à–±–µ–∫</h2>
      <div>
        <div className={styles.block}>
          {levelOptions.map((level) => (
            <div className={styles.level}>
              <p className={styles.levelTitle}>{level.name}</p>
              <div className={styles.levelInfo}>
                <span className={styles.levelLabel}>–ú–∏–Ω.:</span>
                <span className={styles.levelValue}>
                  {level.min_amount} –≥—Ä–Ω
                </span>
              </div>
              <div className={styles.levelInfo}>
                <span className={styles.levelLabel}>–ú–∞–∫—Å.:</span>
                <span className={styles.levelValue}>
                  {level.max_amount} –≥—Ä–Ω
                </span>
              </div>
              <div className={styles.levelInfo}>
                <span className={styles.levelLabel}>–ü—Ä–æ—Ü–µ–Ω—Ç:</span>
                <span className={styles.levelValue}>
                  {level.percentage_cashback} %
                </span>
              </div>

              <div className={styles.buttonContainer}>
                <button
                  className={`${styles.button} ${styles.editButton}`}
                  onClick={() => onEdit(level)}
                >
                  ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                </button>
                <button
                  className={`${styles.button} ${styles.deleteButton}`}
                  onClick={() => onDelete(level.id as number)}
                >
                  üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                </button>
              </div>
            </div>
          ))}
        </div>
        <div className={styles.actions}>
          <Button type="primary" onClick={showModal}>
            –î–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å
          </Button>
        </div>
      </div>

      <Modal open={isModalOpen} onCancel={handleCancel} footer={null}>
        <Form form={form} layout="vertical" onFinish={handleSubmit}>
          <Form.Item
            label="–ù–∞–∑–≤–∞–Ω–∏–µ"
            name="name"
            rules={[{ required: true, message: '–ó–∞–ø–æ–≤–Ω—ñ—Ç—å —Ü–µ –ø–æ–ª–µ!' }]}
          >
            <Input placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ" />
          </Form.Item>
          <Form.Item
            label="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞"
            name="min_amount"
            rules={[{ required: true, message: '–ó–∞–ø–æ–≤–Ω—ñ—Ç—å —Ü–µ –ø–æ–ª–µ!' }]}
          >
            <Input placeholder="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞" type="number" />
          </Form.Item>
          <Form.Item
            label="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞"
            name="max_amount"
            rules={[{ required: true, message: '–ó–∞–ø–æ–≤–Ω—ñ—Ç—å —Ü–µ –ø–æ–ª–µ!' }]}
          >
            <Input placeholder="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞" type="number" />
          </Form.Item>
          <Form.Item
            label="–ü—Ä–æ—Ü–µ–Ω—Ç"
            name="percentage_cashback"
            rules={[{ required: true, message: '–ó–∞–ø–æ–≤–Ω—ñ—Ç—å —Ü–µ –ø–æ–ª–µ!' }]}
          >
            <Input placeholder="–ü—Ä–æ—Ü–µ–Ω—Ç" type="number" />
          </Form.Item>
          <Form.Item>
            <Button type="primary" htmlType="submit">
              –ó–±–µ—Ä–µ–≥—Ç–∏
            </Button>
          </Form.Item>
        </Form>
      </Modal>
    </div>
  );
};

export default CashbackPageContent;
